--- Returns a random number or integer depending on the arguments provided.
--- 
--- - `random()` → float in range `[0, 1)`
--- - `random(n)` → integer in range `[1, n]`
--- - `random(a, b)` → integer in range `[a, b]`
---
--- Raises an error if too many arguments are passed.
---
--- **Examples:**
--- ```xylia
--- random();       -- 0.73124
--- random(10);     -- 7
--- random(5, 15);  -- 12
--- ```
func random(args: Any[]) -> Any {
  let argc = len(args);
  if (argc == 0)
    return __builtin___random();

  if (argc == 1) {
    assert typeof(args[0]) == "number", "Expected argument 'n' to be number in 'random(n)'";
    return __builtin___floor(__builtin___random() * args[0]) + 1;
  }

  if (argc == 2) {
    assert typeof(args[0]) == "number", "Expected argument 'a' to be number in 'random(a, b)'";
    assert typeof(args[1]) == "number", "Expected argument 'b' to be number in 'random(a, b)'";
    return __builtin___floor(__builtin___random() * (args[1] - args[0] + 1)) + args[0];
  }

  assert false, "Too many arguments in 'random()'";
}

--- Seeds the random number generator with the given `seed`.
--- This allows deterministic random sequences for testing or reproducibility.
---
--- **Example:**
--- ```xylia
--- randomseed(42);
--- print(random());   -- always the same value for seed 42
--- ```
func randomseed(seed: number) {
  __builtin___randomseed(seed);
}

--- Returns a random element from a list, vector, or from the provided arguments.
---
--- If one argument is given and it is a sequence (like a `vector` or `list`),
--- a random element is chosen from that sequence.
---
--- If multiple arguments are passed, one of them is chosen randomly.
---
--- **Examples:**
--- ```xylia
--- choice([1, 2, 3, 4]);   -- 2
--- choice("a", "b", "c");  -- "b"
--- choice(Vector(0:10));   -- random element from vector
--- ```
func choice(args: Any[]) -> Any {
  let argc = len(args);
  if (argc == 1) {
    let arg = args[0];
    if (typeof(arg) == "vector" || typeof(arg) == "list")
      return arg[random(len(arg))];
    else if (isinstance(arg, import("vector").Vector))
      return arg[random(arg.size())];
    return arg;
  } else
    return args[random(argc)];
}
