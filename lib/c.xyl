let VOID = 0;
let CHAR = 1;
let SHORT = 2;
let INT = 3;
let LONG = 4;
let UCHAR = 5;
let USHORT = 6;
let UINT = 7;
let ULONG = 8;
let FLOAT = 9;
let DOUBLE = 10;

class PTR {
  func init(type) {
    assert (typeof(type) == "number" && VOID <= type && type <= DOUBLE) ||
            isinstance(type, PTR),
            "type must be valid c type";
    self.__type = type;
  }
}

class ref {
  func init(value) {
    self.__value = __builtin___ref(value);
  }

  func get() {
    return __builtin___deref(self.__value);
  }

  func set(value) {
    __builtin___setref(self.__value, value);
  }
}

class dll {
  func init(path) {
    self.__dll = __builtin___dll_open(path);
  }

  func function(name, ret, args) {
    assert typeof(name) == "string", "name must be string";
    assert (typeof(ret) == "number" && VOID <= ret && ret <= DOUBLE) ||
            isinstance(ret, PTR),
            "ret must be valid c type";
    assert typeof(args) == "vector", "args must be vector";

    let argc = len(args);
    for (let i = 0; i < argc; i = i + 1) {
      let arg = args[i];
      assert (typeof(arg) == "number" && VOID <= ret && ret <= DOUBLE) ||
              isinstance(arg, PTR),
              string(arg) + "must be valid c type";
    }

    return __builtin___dll_function(self.__dll, name, ret, args);
  }
}
