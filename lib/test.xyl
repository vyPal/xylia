let Vector = import("vector")::Vector;

let verbose = true;

func set_verbose(value) {
  assert typeof(value) == "bool", "value must be bool";
  verbose = value;
}

class Case {
  func init(name, fn) {
    assert typeof(name) == "string", "name must be string";
    assert typeof(fn) == "function", "fn must be function";
    self.name = name;
    self.fn = fn;
  }

  func run() {
    self.fn();
    return case_failed();
  }
}

class Suite {
  func init(name) {
    assert typeof(name) == "string", "name must be string";
    self.cases = Vector();
    self.name = name;
  }

  func add_case(name, fn) {
    assert typeof(name) == "string", "name must be string";
    assert typeof(fn) == "function", "fn must be function";
    self.cases.push(Case(name, fn));
  }

  func run() {
    __builtin___printf(["\x1b[1;33mSuite\x1b[0m: %\n", self.name]);

    let passed = 0;
    let failed = 0;

    let cases_len = self.cases.size();
    for (let i = 0; i < cases_len; i = i + 1) {
      if (self.cases[i].run()) {
        __builtin___printf(["  \x1b[1;31m[FAILED]\x1b[0m %\n", self.cases[i].name]);
        failed = failed + 1;
      } else {
        if (verbose)
          __builtin___printf(["  \x1b[1;32m[PASSED]\x1b[0m %\n", self.cases[i].name]);
        passed = passed + 1;
      }
    }

    __builtin___print(["\nSummary: "]);
    __builtin___printf(["\x1b[1;32m%\x1b[0m passed, ", passed]);
    __builtin___printf(["\x1b[1;31m%\x1b[0m failed, ", failed]);
    __builtin___printf(["\x1b[1;34m%\x1b[0m total\n", cases_len]);
  }
}

class Runner {
  func init() {
    self.suites = Vector();
  }

  func add_suite(suite) {
    assert isinstance(suite, Suite), "suite must be test.Suite";
    self.suites.push(suite);
  }

  func run() {
    let suites_size = self.suites.size();
    for (let i = 0; i < suites_size; i = i + 1)
      self.suites[i].run();
  }
}
