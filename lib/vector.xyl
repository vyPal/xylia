class Vector {
  func init(args: Any[]) -> Vector {
    let argc = len(args);

    if (argc == 1 && typeof(args[0]) == "range")
      self.data = vector(args[0]);
    else {
      self.data = {};
      __builtin___append(self.data, ..args);
    }
  }

  func size() -> number                  { return len(self.data); }
  func push(args: Any[])                 { __builtin___append(self.data, ..args); }
  func pop() -> Any                      { return __builtin___pop(self.data); }
  func insert(index: number, value: Any) { __builtin___insert(self.data, index, value); }
  func remove(index: number) -> Any      { return __builtin___remove(self.data, index); }
  func to_string() -> string             { return __builtin___string(self.data); }

  operator [] (index: number) -> Any                { return self.data[index]; }
  operator []= (index: number, value: Any)          { self.data[index] = value; }
  operator [:] (from: number, to: number) -> Vector { return Vector(..__builtin___slice(self.data, from, to)); }

  operator [:]= (from: number, to: number, value: Any) {
    for (let i = from; i < to; i = i + 1)
      __builtin___remove(self.data, from);

    if (typeof(value) == "list") {
      to = len(value);
      for (let i = 0; i < to; i = i + 1)
        __builtin___insert(self.data, from + i, value[i]);
    } else
      __builtin___insert(self.data, from, value);
  }

  operator + (other: Vector) -> Vector {
    assert typeof(other) == "vector" || isinstance(other, Vector),
            "Can only add vectors";

    let elements;
    if (typeof(other) == "vector")
      elements = other;
    else 
      elements = other.data;

    let new_vec = Vector(..self.data);
    new_vec.push(..elements);

    return new_vec;
  }

  operator == (other: Vector) -> Vector {
    assert typeof(other) == "vector" || isinstance(other, Vector),
            "Can only compare vectors";

    let elements;
    if (typeof(other) == "vector")
      elements = other;
    else
      elements = other.data;

    return self.data == elements;
  }
}
